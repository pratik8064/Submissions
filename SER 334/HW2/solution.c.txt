////////////////////////////////////////////////////////////////////////////////
//INCLUDES
#include <stdio.h>
#include <stdlib.h>

////////////////////////////////////////////////////////////////////////////////
//MACROS: CONSTANTS

//disable visual studio warning.
#pragma warning(disable: 4996)

//maximum length of strings (including terminator).
#define MAX_STRING_LENGTH 1024

////////////////////////////////////////////////////////////////////////////////
//DATA STRUCTURES

//enum for the day of the week
typedef enum {
	SER = 0, EGR, CSE, EEE
} Subject;

//structure to hold information associated with a particular course.
struct Course {
	Subject subject;			// subject
	int number;				// number 
	char teacher[MAX_STRING_LENGTH];	// teacher's name
	int credits;				// number of credits
};

////////////////////////////////////////////////////////////////////////////////
//GLOBAL VARIABLES

//place to store course information
struct Course* CourseCollection = NULL;

//number of courses in the collection. also the index of the next empty element.
int courseCount = 0;

////////////////////////////////////////////////////////////////////////////////
//FORWARD DECLARATIONS
void branching(char option);
void class_insert();
void class_delete();
void schedule_print();
int schedule_get_credits();

//main entry point. Starts the program by displaying a welcome and beginning an 
//input loop that displays a menu and processes user input. Pressing q quits.      
int main() {
	char input_buffer;

	printf("\n\nWelcome to ASU Class Schedule\n");

	//menu and input loop
	do {
		printf("\nMenu Options\n");
		printf("------------------------------------------------------\n");
		printf("a: Add a class\n");
		printf("d: Drop a class\n");
		printf("s: Show your classes\n");
		printf("q: Quit\n");
		printf("\nTotal Credits: %d\n\n", schedule_get_credits());
		printf("Please enter a choice ---> ");

		scanf(" %c", &input_buffer);

		branching(input_buffer);
	} while (input_buffer != 'q');

	return 0;
}

//takes a character representing an inputs menu choice and calls the appropriate
//function to fulfill that choice. Display an error message if the character is
//not recognized.
void branching(char option) {
	switch (option) {
	case 'a':
		class_insert();
		break;

	case 'd':
		class_delete();
		break;

	case 's':
		schedule_print();
		break;

	case 'q':
		// main loop will take care of this.
		break;

	default:
		printf("\nError: Invalid Input.  Please try again...");
		break;
	}
}

//Prompts the user for a course subject, number, credits, and teacher. Creates a
//new entry in the collection from this information. Insertion is only allowed
//if there is space in the collection, otherwise an error message is displayed.
void class_insert() {
	int i, j, least;
	struct Course temp;

	printf("\nWhat is the subject? (SER=0, EGR=1, CSE=2, EEE=3)?\n");
	scanf("%d", (int*)&temp.subject);

	printf("\nWhat is the number (e.g. 240)?\n");
	scanf("%d", &temp.number);

	printf("\nHow many credits is the class (e.g. 3)?\n");
	scanf("%d", &temp.credits);

	printf("\nWhat is the name of the teacher?\n");
	scanf("%s", temp.teacher);

	struct Course* oldCollection = CourseCollection;
	CourseCollection = malloc(sizeof(struct Course) * (courseCount + 1));
	for (i = 0; i < courseCount; i++)
		CourseCollection[i] = oldCollection[i];
	CourseCollection[courseCount] = temp;
	free(oldCollection);

	courseCount++;
	
	//standard selection sort
	for (i = 0; i < courseCount; i++) {
		least = i;

		for (j = i; j < courseCount; j++) {
			if (CourseCollection[j].number < CourseCollection[least].number)
				least = j;
		}

		//swap the positions with temporary memory
		temp = CourseCollection[i];
		CourseCollection[i] = CourseCollection[least];
		CourseCollection[least] = temp;
	}
	
}

//Prompts the user for a course number. Searches the collection to find the
//first class with a matching number. Deletes that element in the array and
//shifts other elements to the left. Deletion is only allowed if a matching
//course is found, otherwise an error message is displayed.
void class_delete()
{
	int i;
	int found_index;
	int target_number;

	printf("Enter number:\n");
	scanf("%d", &target_number);

	found_index = -1;

	//locate the index of the class with the class number to be deleted.
	for (i = 0; i < courseCount; i++)
		if (CourseCollection[i].number == target_number) {
			found_index = i;
			break;
		}

	if (found_index == -1) {
		printf("Class not found.");
	}
	else {
		//started with that index, move each of the classes following it backwards.
		for (i = found_index; i < courseCount - 1; i++)
			CourseCollection[i] = CourseCollection[i + 1];

		struct Course* oldCollection = CourseCollection;
		CourseCollection = malloc(sizeof(struct Course) * (courseCount + -1));
		for (i = 0; i < courseCount-1; i++)
			CourseCollection[i] = oldCollection[i];
		free(oldCollection);

		courseCount--;
	}
}

//Loops over the collection and prints each course it lists.
void schedule_print() {
	int i;

	printf("\n\nClass Schedule:\n");

	for (i = 0; i < courseCount; i++) {
		switch (CourseCollection[i].subject) {
			case SER:
				printf("SER"); break;
			case EGR:
				printf("EGR"); break;
			case CSE:
				printf("CSE"); break;
			case EEE:
				printf("EEE"); break;
			default:
				printf("UNK"); break;
		}

		printf("%d  %d  %s\n", CourseCollection[i].number, CourseCollection[i].credits, CourseCollection[i].teacher);
	}
}

//Loops over the collection and sums the credits for each course. The sum is
//returned as an integer.
int schedule_get_credits() {
	int i;
	int total = 0;

	for (i = 0; i < courseCount; i++)
		total += CourseCollection[i].credits;

	return total;
}